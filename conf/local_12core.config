/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Local 12-core configuration for nf-core/assemblysnps
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Configuration for running on a local machine with 12 cores and 64GB RAM
----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Local 12-core'
    config_profile_description = 'Local execution profile for 12-core system with 64GB RAM'
    
    // Limit resource usage
    max_memory                 = '64.GB'
    max_cpus                   = 12
    max_time                   = '24.h'
}

process {
    // Global process configuration
    executor = 'local'
    
    // Resource labels
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2                     , 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt  , 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6                     , 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt  , 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12                    , 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt  , 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt  , 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt , 'memory'  ) }
    }
    
    // Specific process configurations
    withName: PARSNP {
        cpus   = { check_max( 8                     , 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt  , 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt  , 'time'    ) }
    }
}

// Conda configuration
conda {
    enabled = true
    useMamba = true
}

// Singularity configuration (alternative to conda)
singularity {
    enabled = false
    autoMounts = true
}

// Docker configuration (alternative to conda)
docker {
    enabled = false
    runOptions = '-u $(id -u):$(id -g)'
}